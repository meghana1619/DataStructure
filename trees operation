class Node{
  constructor(value){
    this.value=value;
    this.right=null;
    this.left=null;
  }
}
class BinarySearchTree{
    constructor(){
      this.root=null;
    }
    insert(value){
      let node=new Node(value)
      if(this.root===null){
        this.root=node;
      }
      else{
        let current=this.root;
        while(true){
          if(value<current.value){
            if(!current.left){
              current.left=node;
              return this;
            }
            current=current.left;
          }
        else{
             if(!current.right){
              current.right=node;
              return this;
            }
            current=current.right;
        }
      }
      }
    }
    lookup(value){
      if(!this.root){
        return false;
      }
      let current=this.root;
    while(current){
      if(value<current.value){
        current=current.left;
      }
      else if(value>current.value){
        current=current.right;
      }
      else if(value===current.value){
        return current;
      }
    }
    return false;     
    }
    remove(){

    }
}
const bst=new BinarySearchTree()
bst.insert(9);
bst.insert(6);
bst.insert(10);
bst.lookup(6);
